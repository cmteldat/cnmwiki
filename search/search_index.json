{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Obsidian Notes \u00b6 Publish your public notes with MkDocs Hello World! \u00b6 The index.md in the /docs folder is the homepage you see here. The folders in /docs appear as the main sections on the navigation bar. The notes appear as pages within these sections. For example, Note 1 in Topic 1 Testing","title":"Obsidian Notes"},{"location":"#obsidian-notes","text":"Publish your public notes with MkDocs","title":"Obsidian Notes"},{"location":"#hello-world","text":"The index.md in the /docs folder is the homepage you see here. The folders in /docs appear as the main sections on the navigation bar. The notes appear as pages within these sections. For example, Note 1 in Topic 1 Testing","title":"Hello World!"},{"location":"Alias/","tags":"alias commands terminal","text":"Aliases \u00b6 Setup \u00b6 Create the file ~/.bash_aliases cd ~ touch .bash_aliases Note : This .bash_aliases should be already referenced in ~/.bashrc Important : The reference must be placed after the [[Environment variables|environment variables]] in order to work properly. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi Add alias \u00b6 Edit the .bash_aliases with the aliases that you want. For example: alias clip=\"xclip -selection c\" # copy to clipboard alias 2repos=\"cd $TELDAT_REPOS_HOME\" Commands \u00b6 # View aliases alias","title":"Aliases"},{"location":"Alias/#aliases","text":"","title":"Aliases"},{"location":"Alias/#setup","text":"Create the file ~/.bash_aliases cd ~ touch .bash_aliases Note : This .bash_aliases should be already referenced in ~/.bashrc Important : The reference must be placed after the [[Environment variables|environment variables]] in order to work properly. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi","title":"Setup"},{"location":"Alias/#add-alias","text":"Edit the .bash_aliases with the aliases that you want. For example: alias clip=\"xclip -selection c\" # copy to clipboard alias 2repos=\"cd $TELDAT_REPOS_HOME\"","title":"Add alias"},{"location":"Alias/#commands","text":"# View aliases alias","title":"Commands"},{"location":"Features/LaTeX%20Math%20Support/","text":"LaTeX Math Support \u00b6 LaTeX math is supported using MathJax. Inline math looks like \\(f(x) = x^2\\) . The input for this is $f(x) = x^2$ . Use $...$ . For a block of math, use $$...$$ on separate lines $$ F(x) = \\int^a_b \\frac{1}{2}x^4 $$ gives \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]","title":"LaTeX Math Support"},{"location":"Features/LaTeX%20Math%20Support/#latex-math-support","text":"LaTeX math is supported using MathJax. Inline math looks like \\(f(x) = x^2\\) . The input for this is $f(x) = x^2$ . Use $...$ . For a block of math, use $$...$$ on separate lines $$ F(x) = \\int^a_b \\frac{1}{2}x^4 $$ gives \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]","title":"LaTeX Math Support"},{"location":"Features/Mermaid%20Diagrams/","text":"Mermaid diagrams \u00b6 Here's the example from MkDocs Material documentation : graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Mermaid diagrams"},{"location":"Features/Mermaid%20Diagrams/#mermaid-diagrams","text":"Here's the example from MkDocs Material documentation : graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Mermaid diagrams"},{"location":"Features/Text%20Formatting/","text":"Text Formatting \u00b6 You can have lists like this first second third Or checklist lists to Get things done Also, get highlights and strikethroughs as above (similar to Obsidian). More formatting options for your webpage here . (but not compatible with Obsidian)","title":"Text Formatting"},{"location":"Features/Text%20Formatting/#text-formatting","text":"You can have lists like this first second third Or checklist lists to Get things done Also, get highlights and strikethroughs as above (similar to Obsidian). More formatting options for your webpage here . (but not compatible with Obsidian)","title":"Text Formatting"},{"location":"Linux/Alias/","tags":"alias commands terminal","text":"Aliases \u00b6 Setup \u00b6 Create the file ~/.bash_aliases cd ~ touch .bash_aliases Note : This .bash_aliases should be already referenced in ~/.bashrc Important : The reference must be placed after the [[Environment variables|environment variables]] in order to work properly. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi Add alias \u00b6 Edit the .bash_aliases with the aliases that you want. For example: alias clip=\"xclip -selection c\" # copy to clipboard alias 2repos=\"cd $TELDAT_REPOS_HOME\" Commands \u00b6 # View aliases alias","title":"Aliases"},{"location":"Linux/Alias/#aliases","text":"","title":"Aliases"},{"location":"Linux/Alias/#setup","text":"Create the file ~/.bash_aliases cd ~ touch .bash_aliases Note : This .bash_aliases should be already referenced in ~/.bashrc Important : The reference must be placed after the [[Environment variables|environment variables]] in order to work properly. if [ -f ~/.bash_aliases ]; then . ~/.bash_aliases fi","title":"Setup"},{"location":"Linux/Alias/#add-alias","text":"Edit the .bash_aliases with the aliases that you want. For example: alias clip=\"xclip -selection c\" # copy to clipboard alias 2repos=\"cd $TELDAT_REPOS_HOME\"","title":"Add alias"},{"location":"Linux/Alias/#commands","text":"# View aliases alias","title":"Commands"},{"location":"Linux/Docker/","tags":"docker setup","text":"Docker \u00b6 Installation \u00b6 Follow this link instructions to install docker on your machine sudo apt update # Next, install a few prerequisite packages which let `apt` use packages over HTTPS: sudo apt install apt-transport-https ca-certificates curl software-properties-common # Then add the GPG key for the official Docker repository to your system: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg # Add the Docker repository to APT sources: echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null # Update your existing list of packages again for the addition to be recognized: sudo apt update # Make sure you are about to install from the Docker repo instead of the default Ubuntu repo: apt-cache policy docker-ce # Finally, install Docker: sudo apt install docker-ce # Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it\u2019s running: sudo systemctl status docker Add docker to groups so we don't need sudo sudo usermod -aG docker ${USER} Install docker-compose for later use sudo apt-get install docker-compose Restart your computer to apply changes Commands \u00b6 List containers docker ps [OPTIONS] --all # Show all containers (default shows just running) Create volume docker volume create Display information on one or more volumes docker volume inspect List volumes docker volume ls Remove all unused local volumes docker volume prune Remove one or more volumes docker volume rm Start existing containers for a service docker compose start Builds, (re)creates, starts and attaches to containers for a service docker compose up Same as up, but starts the containers in the background and leaves them running docker compose up -d Stop the containers, but won't remove them docker compose stop Stop the container by name docker stop [CONTAINER_NAME] Stop the containers, remove the stopped containers as well as any networks that were created docker compose down Same as down, plus remove all volumes. This is great for a full blown reset of the environment docker compose down -v Restart container with name [NAME] docker restart [NAME] Build docker image with an image name and tag docker build -t networkcloudmanager/[IMAGE-NAME]:[TAG] . Docker logs TODO docker logs [] See stats about the docker containers with CPU usage, memory, etc docker stats Delete all docker images docker image prune -a TODO docker rmi [] Docker Hub \u00b6 Push image to Docker Hub # Build docker image with desired tag docker build -t networkcloudmanager/[IMAGE-NAME]:[TAG] . # Log in to Docker Hub docker login # Check if there are more than one images with the same tag with docker images # If not, go ahead and push it docker push networkcloudmanager/[IMAGE-NAME]:[TAG]","title":"Docker"},{"location":"Linux/Docker/#docker","text":"","title":"Docker"},{"location":"Linux/Docker/#installation","text":"Follow this link instructions to install docker on your machine sudo apt update # Next, install a few prerequisite packages which let `apt` use packages over HTTPS: sudo apt install apt-transport-https ca-certificates curl software-properties-common # Then add the GPG key for the official Docker repository to your system: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg # Add the Docker repository to APT sources: echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null # Update your existing list of packages again for the addition to be recognized: sudo apt update # Make sure you are about to install from the Docker repo instead of the default Ubuntu repo: apt-cache policy docker-ce # Finally, install Docker: sudo apt install docker-ce # Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it\u2019s running: sudo systemctl status docker Add docker to groups so we don't need sudo sudo usermod -aG docker ${USER} Install docker-compose for later use sudo apt-get install docker-compose Restart your computer to apply changes","title":"Installation"},{"location":"Linux/Docker/#commands","text":"List containers docker ps [OPTIONS] --all # Show all containers (default shows just running) Create volume docker volume create Display information on one or more volumes docker volume inspect List volumes docker volume ls Remove all unused local volumes docker volume prune Remove one or more volumes docker volume rm Start existing containers for a service docker compose start Builds, (re)creates, starts and attaches to containers for a service docker compose up Same as up, but starts the containers in the background and leaves them running docker compose up -d Stop the containers, but won't remove them docker compose stop Stop the container by name docker stop [CONTAINER_NAME] Stop the containers, remove the stopped containers as well as any networks that were created docker compose down Same as down, plus remove all volumes. This is great for a full blown reset of the environment docker compose down -v Restart container with name [NAME] docker restart [NAME] Build docker image with an image name and tag docker build -t networkcloudmanager/[IMAGE-NAME]:[TAG] . Docker logs TODO docker logs [] See stats about the docker containers with CPU usage, memory, etc docker stats Delete all docker images docker image prune -a TODO docker rmi []","title":"Commands"},{"location":"Linux/Docker/#docker-hub","text":"Push image to Docker Hub # Build docker image with desired tag docker build -t networkcloudmanager/[IMAGE-NAME]:[TAG] . # Log in to Docker Hub docker login # Check if there are more than one images with the same tag with docker images # If not, go ahead and push it docker push networkcloudmanager/[IMAGE-NAME]:[TAG]","title":"Docker Hub"},{"location":"Linux/Pyenv/","tags":"pyenv python setup","text":"Pyenv \u00b6 Installation \u00b6 Install pyenv for managing multiple python versions git clone https://github.com/pyenv/pyenv.git ~/.pyenv Then, add the commands to ~/.bashrc : # pyenv installation export PYENV_ROOT=\"$HOME/.pyenv\" command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\" eval \"$(pyenv init -)\" # end of pyenv installation Add to ~/.profile : # pyenv installation export PYENV_ROOT=\"$HOME/.pyenv\" command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\" eval \"$(pyenv init -)\" # end of pyenv installation Restart the shell, for the PATH changes to take effect exec \"$SHELL\" Python installation \u00b6 Install Python for both 3.x and 2.x pyenv install 3.10.5 pyenv install 2.7.18 You can verify that both installations have been successful with pyenv global python3 --version # Check your associated python3 version python2 --version # Check your associated python2 version","title":"Pyenv"},{"location":"Linux/Pyenv/#pyenv","text":"","title":"Pyenv"},{"location":"Linux/Pyenv/#installation","text":"Install pyenv for managing multiple python versions git clone https://github.com/pyenv/pyenv.git ~/.pyenv Then, add the commands to ~/.bashrc : # pyenv installation export PYENV_ROOT=\"$HOME/.pyenv\" command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\" eval \"$(pyenv init -)\" # end of pyenv installation Add to ~/.profile : # pyenv installation export PYENV_ROOT=\"$HOME/.pyenv\" command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\" eval \"$(pyenv init -)\" # end of pyenv installation Restart the shell, for the PATH changes to take effect exec \"$SHELL\"","title":"Installation"},{"location":"Linux/Pyenv/#python-installation","text":"Install Python for both 3.x and 2.x pyenv install 3.10.5 pyenv install 2.7.18 You can verify that both installations have been successful with pyenv global python3 --version # Check your associated python3 version python2 --version # Check your associated python2 version","title":"Python installation"},{"location":"Linux/Shortcuts/","tags":"ubuntu shortcuts hotkeys","text":"Shortcuts \u00b6 # Move between workspaces (Right/Left) Ctrl + Alt + Right/Left # Move window between workspaces (Right/Left) Ctrl + Super + Right/Left # Move window between monitors (Right/Left) Alt + Shift + Right/Left # List of applications Alt + Space # Activities menu Super (Windows Key) # View notifiacions Super + V Super + M # Open Terminal Ctrl + Alt + T # Lock PC Super + L","title":"Shortcuts"},{"location":"Linux/Shortcuts/#shortcuts","text":"# Move between workspaces (Right/Left) Ctrl + Alt + Right/Left # Move window between workspaces (Right/Left) Ctrl + Super + Right/Left # Move window between monitors (Right/Left) Alt + Shift + Right/Left # List of applications Alt + Space # Activities menu Super (Windows Key) # View notifiacions Super + V Super + M # Open Terminal Ctrl + Alt + T # Lock PC Super + L","title":"Shortcuts"},{"location":"Linux/VPN/","tags":"vpn setup","text":"VPN \u00b6 This process is created by following this guide Flatpak \u00b6 Install Flatpak sudo apt-get install flatpak Install Shrew Soft VPN via Flatpak flatpak install flathub net.shrew.ike.qikea If there's an error during the installation, follow the instructions running flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo ****``` To run the VPN service, we need a daemon running in the computer. Since this option is not supported since Ubuntu 18.04, we have found this [docker image](https://hub.docker.com/r/beardoverflow/ike) as a workaround. In order to pull this image, we can either use the original one or use a snapshot built by Teldat for easier use. ```bash # Teldat image (recommended) scp <goliath_user>@192.168.213.72:/var/www/html/repo/linux_devenvs/iked.tar iked.tar && docker image load -i iked.tar # Original image docker pull beardoverflow/ike Run the daemon with the following command docker run -d --name=iked --net=host --privileged -v /etc/resolv.conf:/etc/resolv.conf -v /run:/run beardoverflow/ike Automate the docker \u00b6 For easier use, we recommend automating the docker image process so it's automatically executed during startup so we can connect to the VPN with Shrew soft without issue. Create the file ~/.profile_on_startup with the following command: # VPN Configuration: # Run iked docker docker rm -f iked &> /dev/null && docker run -d --name=iked --net=host --privileged -v /etc/resolv.conf:/etc/resolv.conf -v /run:/run beardoverflow/ike Append to the end of ~/.profile to call the new file # Call on startup if [ -f ~/.profile_on_startup ]; then . ~/.profile_on_startup fi # End of calls on startup","title":"VPN"},{"location":"Linux/VPN/#vpn","text":"This process is created by following this guide","title":"VPN"},{"location":"Linux/VPN/#flatpak","text":"Install Flatpak sudo apt-get install flatpak Install Shrew Soft VPN via Flatpak flatpak install flathub net.shrew.ike.qikea If there's an error during the installation, follow the instructions running flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo ****``` To run the VPN service, we need a daemon running in the computer. Since this option is not supported since Ubuntu 18.04, we have found this [docker image](https://hub.docker.com/r/beardoverflow/ike) as a workaround. In order to pull this image, we can either use the original one or use a snapshot built by Teldat for easier use. ```bash # Teldat image (recommended) scp <goliath_user>@192.168.213.72:/var/www/html/repo/linux_devenvs/iked.tar iked.tar && docker image load -i iked.tar # Original image docker pull beardoverflow/ike Run the daemon with the following command docker run -d --name=iked --net=host --privileged -v /etc/resolv.conf:/etc/resolv.conf -v /run:/run beardoverflow/ike","title":"Flatpak"},{"location":"Linux/VPN/#automate-the-docker","text":"For easier use, we recommend automating the docker image process so it's automatically executed during startup so we can connect to the VPN with Shrew soft without issue. Create the file ~/.profile_on_startup with the following command: # VPN Configuration: # Run iked docker docker rm -f iked &> /dev/null && docker run -d --name=iked --net=host --privileged -v /etc/resolv.conf:/etc/resolv.conf -v /run:/run beardoverflow/ike Append to the end of ~/.profile to call the new file # Call on startup if [ -f ~/.profile_on_startup ]; then . ~/.profile_on_startup fi # End of calls on startup","title":"Automate the docker"},{"location":"Topic%201/Note%201/","text":"Note 1 \u00b6 Example: link to Mermaid Diagrams under Features","title":"Note 1"},{"location":"Topic%201/Note%201/#note-1","text":"Example: link to Mermaid Diagrams under Features","title":"Note 1"},{"location":"Topic%201/Note%202/","text":"Note 2 \u00b6","title":"Note 2"},{"location":"Topic%201/Note%202/#note-2","text":"","title":"Note 2"}]}